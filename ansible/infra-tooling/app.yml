- hosts: all
  vars_files:
    - ansible_variables.yaml
  tasks:
  - name: Copy provisioning host script
    copy:
      src: '{{item}}'
      dest: /home/ubuntu/scripts/
      mode: +x
    loop:
      - scripts/provision_host.sh
  - name: Execute the provisioning script
    become: yes
    shell: /home/ubuntu/scripts/provision_host.sh
    register: provision_host_script

#add repos section      
  - name: Install support packages
    become: yes
    yum:
      name:
        - zip
        - unzip
        - jq 
        - python-apt
      update_cache: '{{ update_apt_cache }}'  
      
  - name: add docker apt-key
    become: yes
    apt_key:
      url: '{{ docker.gpg_key }}'
      state: present

  - name: add docker apt repo
    become: yes
    apt_repository:
      repo: '{{ docker.repo_URL }}'

  - name: Install Docker
    become: yes
    apt:
      name: docker-ce
      state: present
      update_cache: '{{ update_apt_cache }}'

  - name: Install Docker-Compose
    become: yes
    apt:
      name: docker-compose
      state: present
      update_cache: '{{ update_apt_cache }}'   
                  
  - name: git repo
    become: yes
    git: 
      repo: '{{ git.repo }}'
      dest: /home/ubuntu/workshop/  
      clone: yes 

  - name: Add java repo  
    become: yes   
    apt_repository:
      repo: '{{ java.repo }}'
      update_cache: '{{ update_apt_cache }}'

  - name: Install open-jdk
    become: yes
    yum:
      name:
        - wget
        - openjdk-8-jdk
      update_cache: '{{ update_apt_cache }}'    

  - name: Set Java_Home
    become: yes
    shell: 
      cmd: echo 'export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"' >> /etc/profile.d/myenvvars.sh
      warn: false

 # - name: Add the Jenkins public GPG key to the apt repo
 #   become: yes
 #   apt_key: 
 #     url: '{{ jenkins.jenkins_repo_key_url }}'
 #     state: present

 # - name: Add Jenkins apt repo
 #   become: yes
 #   apt_repository: 
 #     repo: '{{ jenkins.jenkins_repo_url }}'
 #     update_cache: '{{ update_apt_cache }}'
 #     state: present

 # - name: Install Jenkins server
 #   become: yes
 #   apt: 
 #     name: jenkins 
 #     state: present
 
 # - name: Start & Enable Jenkins
 #   become: yes  
 #   systemd:
 #     name: jenkins
 #     state: started
 #     enabled: true

 # - name: Sleep for 30 seconds and continue with play
 #   wait_for: timeout=30

 # - name: add user to docker group
 #   become: yes
 #   command: usermod -aG docker jenkins

 # - name: Restart docker service
 #   become: yes
 #   service:
 #     name: docker
 #     state: restarted

 # - name: Execute sed
 #   become: yes
 #   shell: 
 #     cmd: sed -i 's/https/http/g' /var/lib/jenkins/hudson.model.UpdateCenter.xml
 #    warn: false

 # - name: Restart Jenkins service
 #   become: yes
 #   service:
 #     name: jenkins
 #     state: restarted

 # - name: Get init password Jenkins
 #   become: yes  
 #   shell: if [ -f "/var/lib/jenkins/secrets/initialAdminPassword" ]; then cat /var/lib/jenkins/secrets/initialAdminPassword; fi
 #   changed_when: false
 #   register: result    

 # - name: start app
 #   become: yes  
 #   shell: docker-compose -f /home/ubuntu/workshop/lab1/docker-compose-with-tags.yaml up -d
 #   changed_when: false
 #   register: result

  #- name: Print init password Jenkins
  #  debug:
  #    var: result.stdout    
  #- debug: msg="{{ provision_host_script.stdout }}"
